#include "DataFormats/L1TMuon/interface/EMTFTrack.h"

namespace l1t {


  // Unpacks pT LUT address into dPhi, dTheta, CLCT, FR, eta, and mode   
  std::vector<int> EMTFTrack::Convert_pT_LUT(int _mode, unsigned long _address) {

    int arr[] = {-99, -99, -99, -99, -99, -99, -99, -99, 
		 -99, -99, -99, -99, -99, -99, -99, -99, 
		 -99, -99, -99, -99, -99, -99}; 
    
    int _dPhi_12 = -99;
    int _dPhi_13 = -99;
    int _dPhi_14 = -99;
    int _dPhi_23 = -99;
    int _dPhi_24 = -99;
    int _dPhi_34 = -99;
    
    int _dTheta_12 = -99;
    int _dTheta_13 = -99;
    int _dTheta_14 = -99;
    int _dTheta_23 = -99;
    int _dTheta_24 = -99;
    int _dTheta_34 = -99;
    
    int _clct_1 = -99;
    int _clct_2 = -99;
    int _clct_3 = -99;
    int _clct_4 = -99;
    
    int _fr_1      = -99;
    int _fr_2      = -99;
    int _fr_3      = -99;
    int _fr_4      = -99;

    int _eta_LUT   = -99;
    int _mode_LUT  = -99;

    
    if     (_mode == 3) {
      _dPhi_12     = ( _address >> (0) )   & ( (1 << 9) - 1);
      _dPhi_12 *= (( ( _address >> (0+9) ) & ( (1 << 1) - 1) ) == 0 ? -1 : 1);
      _dTheta_12   = ( _address >> (0+9+1) ) & ( (1 << 3) - 1);
      _clct_1      = ( _address >> (0+9+1+2) ) & ( (1 << 2) - 1);
      _clct_1 *= ( ( ( _address >> (0+9+1+2+3) ) & ( (1 << 1) - 1) ) == 0 ? -1 : 1);
      _clct_2      = ( _address >> (0+9+1+2+3+1) ) & ( (1 << 2) - 1);
      _clct_2 *= ( ( ( _address >> (0+9+1+2+3+1+2) ) & ( (1 << 1) - 1) ) == 0 ? -1 : 1);
      _fr_1        = ( _address >> (0+9+1+2+3+1+2+1) ) & ( (1 << 1) - 1);
      _fr_2        = ( _address >> (0+9+1+2+3+1+2+1+1) ) & ( (1 << 1) - 1);
      _eta_LUT     = ( _address >> (0+9+1+2+3+1+2+1+1+1) ) & ( (1 << 5) - 1);
      _mode_LUT    = ( _address >> (0+9+1+3+2+1+2+1+1+1+5) ) & ( (1 << 4) - 1);
    }
    else if (_mode == 5) {
      _dPhi_13     = ( _address >> (0) )   & ( (1 << 9) - 1);
      _dPhi_13 *= (( ( _address >> (0+9) ) & ( (1 << 1) - 1) ) == 0 ? -1 : 1);
      _dTheta_13   = ( _address >> (0+9+1) ) & ( (1 << 3) - 1);
      _clct_1      = ( _address >> (0+9+1+2) ) & ( (1 << 2) - 1);
      _clct_1 *= ( ( ( _address >> (0+9+1+2+3) ) & ( (1 << 1) - 1) ) == 0 ? -1 : 1);
      _clct_3      = ( _address >> (0+9+1+2+3+1) ) & ( (1 << 2) - 1);
      _clct_3 *= ( ( ( _address >> (0+9+1+2+3+1+2) ) & ( (1 << 1) - 1) ) == 0 ? -1 : 1);
      _fr_1        = ( _address >> (0+9+1+2+3+1+2+1) ) & ( (1 << 1) - 1);
      _fr_3        = ( _address >> (0+9+1+2+3+1+2+1+1) ) & ( (1 << 1) - 1);
      _eta_LUT     = ( _address >> (0+9+1+2+3+1+2+1+1+1) ) & ( (1 << 5) - 1);
      _mode_LUT    = ( _address >> (0+9+1+3+2+1+2+1+1+1+5) ) & ( (1 << 4) - 1);
    }
    else if (_mode == 9) {
      _dPhi_14     = ( _address >> (0) )   & ( (1 << 9) - 1);
      _dPhi_14 *= (( ( _address >> (0+9) ) & ( (1 << 1) - 1) ) == 0 ? -1 : 1);
      _dTheta_14   = ( _address >> (0+9+1) ) & ( (1 << 3) - 1);
      _clct_1      = ( _address >> (0+9+1+2) ) & ( (1 << 2) - 1);
      _clct_1 *= ( ( ( _address >> (0+9+1+2+3) ) & ( (1 << 1) - 1) ) == 0 ? -1 : 1);
      _clct_4      = ( _address >> (0+9+1+2+3+1) ) & ( (1 << 2) - 1);
      _clct_4 *= ( ( ( _address >> (0+9+1+2+3+1+2) ) & ( (1 << 1) - 1) ) == 0 ? -1 : 1);
      _fr_1        = ( _address >> (0+9+1+2+3+1+2+1) ) & ( (1 << 1) - 1);
      _fr_4        = ( _address >> (0+9+1+2+3+1+2+1+1) ) & ( (1 << 1) - 1);
      _eta_LUT     = ( _address >> (0+9+1+2+3+1+2+1+1+1) ) & ( (1 << 5) - 1);
      _mode_LUT    = ( _address >> (0+9+1+3+2+1+2+1+1+1+5) ) & ( (1 << 4) - 1);
    }
    else if (_mode == 6) {
      _dPhi_23     = ( _address >> (0) )   & ( (1 << 9) - 1);
      _dPhi_23 *= (( ( _address >> (0+9) ) & ( (1 << 1) - 1) ) == 0 ? -1 : 1);
      _dTheta_23   = ( _address >> (0+9+1) ) & ( (1 << 3) - 1);
      _clct_2      = ( _address >> (0+9+1+2) ) & ( (1 << 2) - 1);
      _clct_2 *= ( ( ( _address >> (0+9+1+2+3) ) & ( (1 << 1) - 1) ) == 0 ? -1 : 1);
      _clct_3      = ( _address >> (0+9+1+2+3+1) ) & ( (1 << 2) - 1);
      _clct_3 *= ( ( ( _address >> (0+9+1+2+3+1+2) ) & ( (1 << 1) - 1) ) == 0 ? -1 : 1);
      _fr_2        = ( _address >> (0+9+1+2+3+1+2+1) ) & ( (1 << 1) - 1);
      _fr_3        = ( _address >> (0+9+1+2+3+1+2+1+1) ) & ( (1 << 1) - 1);
      _eta_LUT     = ( _address >> (0+9+1+2+3+1+2+1+1+1) ) & ( (1 << 5) - 1);
      _mode_LUT    = ( _address >> (0+9+1+3+2+1+2+1+1+1+5) ) & ( (1 << 4) - 1);
    }
    else if (_mode == 10) {
      _dPhi_24     = ( _address >> (0) )   & ( (1 << 9) - 1);
      _dPhi_24 *= (( ( _address >> (0+9) ) & ( (1 << 1) - 1) ) == 0 ? -1 : 1);
      _dTheta_24   = ( _address >> (0+9+1) ) & ( (1 << 3) - 1);
      _clct_2      = ( _address >> (0+9+1+2) ) & ( (1 << 2) - 1);
      _clct_2 *= ( ( ( _address >> (0+9+1+2+3) ) & ( (1 << 1) - 1) ) == 0 ? -1 : 1);
      _clct_4      = ( _address >> (0+9+1+2+3+1) ) & ( (1 << 2) - 1);
      _clct_4 *= ( ( ( _address >> (0+9+1+2+3+1+2) ) & ( (1 << 1) - 1) ) == 0 ? -1 : 1);
      _fr_2        = ( _address >> (0+9+1+2+3+1+2+1) ) & ( (1 << 1) - 1);
      _fr_4        = ( _address >> (0+9+1+2+3+1+2+1+1) ) & ( (1 << 1) - 1);
      _eta_LUT     = ( _address >> (0+9+1+2+3+1+2+1+1+1) ) & ( (1 << 5) - 1);
      _mode_LUT    = ( _address >> (0+9+1+3+2+1+2+1+1+1+5) ) & ( (1 << 4) - 1);
    }
    else if (_mode == 12) {
      _dPhi_34     = ( _address >> (0) )   & ( (1 << 9) - 1);
      _dPhi_34 *= (( ( _address >> (0+9) ) & ( (1 << 1) - 1) ) == 0 ? -1 : 1);
      _dTheta_34   = ( _address >> (0+9+1) ) & ( (1 << 3) - 1);
      _clct_3      = ( _address >> (0+9+1+2) ) & ( (1 << 2) - 1);
      _clct_3 *= ( ( ( _address >> (0+9+1+2+3) ) & ( (1 << 1) - 1) ) == 0 ? -1 : 1);
      _clct_4      = ( _address >> (0+9+1+2+3+1) ) & ( (1 << 2) - 1);
      _clct_4 *= ( ( ( _address >> (0+9+1+2+3+1+2) ) & ( (1 << 1) - 1) ) == 0 ? -1 : 1);
      _fr_3        = ( _address >> (0+9+1+2+3+1+2+1) ) & ( (1 << 1) - 1);
      _fr_4        = ( _address >> (0+9+1+2+3+1+2+1+1) ) & ( (1 << 1) - 1);
      _eta_LUT     = ( _address >> (0+9+1+2+3+1+2+1+1+1) ) & ( (1 << 5) - 1);
      _mode_LUT    = ( _address >> (0+9+1+3+2+1+2+1+1+1+5) ) & ( (1 << 4) - 1);
    }      
    else if (_mode == 7) {
      _dPhi_12     = ( _address >> (0) )     & ( (1 << 7) - 1);
      _dPhi_23     = ( _address >> (0+7) )   & ( (1 << 5) - 1);
      _dPhi_12 *= (( ( _address >> (0+7+5) ) & ( (1 << 1) - 1) ) == 0 ? -1 : 1);
      _dPhi_23 *= (( ( _address >> (0+7+5+1) ) & ( (1 << 1) - 1) ) == 0 ? -1 : 1);
      _dTheta_13   = ( _address >> (0+7+5+1+1) ) & ( (1 << 3) - 1);
      _clct_1      = ( _address >> (0+7+5+1+1+3) ) & ( (1 << 2) - 1);
      _clct_1 *= ( ( ( _address >> (0+7+5+1+1+3+2) ) & ( (1 << 1) - 1) ) == 0 ? -1 : 1);
      _fr_1        = ( _address >> (0+7+5+1+1+3+2+1) ) & ( (1 << 1) - 1);
      _eta_LUT     = ( _address >> (0+7+5+1+1+3+2+1+1) ) & ( (1 << 5) - 1);
      _mode_LUT    = ( _address >> (0+7+5+1+1+3+2+1+1+5) ) & ( (1 << 4) - 1);
    }
    else if (_mode == 11) {
      _dPhi_12     = ( _address >> (0) )     & ( (1 << 7) - 1);
      _dPhi_24     = ( _address >> (0+7) )   & ( (1 << 5) - 1);
      _dPhi_12 *= (( ( _address >> (0+7+5) ) & ( (1 << 1) - 1 ) ) == 0 ? -1 : 1);
      _dPhi_24 *= (( ( _address >> (0+7+5+1) ) & ( (1 << 1) - 1 ) ) == 0 ? -1 : 1);
      _dTheta_14   = ( _address >> (0+7+5+1+1) ) & ( (1 << 3) - 1);
      _clct_1      = ( _address >> (0+7+5+1+1+3) ) & ( (1 << 2) - 1);
      _clct_1 *= ( ( ( _address >> (0+7+5+1+1+3+2) ) & ( (1 << 1) - 1) ) == 0 ? -1 : 1);
      _fr_1        = ( _address >> (0+7+5+1+1+3+2+1) ) & ( (1 << 1) - 1);
      _eta_LUT     = ( _address >> (0+7+5+1+1+3+2+1+1) ) & ( (1 << 5) - 1);
      _mode_LUT    = ( _address >> (0+7+5+1+1+3+2+1+1+5) ) & ( (1 << 4) - 1);
    }
    else if (_mode == 13) {
      _dPhi_13     = ( _address >> (0) )     & ( (1 << 7) - 1);
      _dPhi_34     = ( _address >> (0+7) )   & ( (1 << 5) - 1);
      _dPhi_13 *= (( ( _address >> (0+7+5) ) & ( (1 << 1) - 1 ) ) == 0 ? -1 : 1);
      _dPhi_34 *= (( ( _address >> (0+7+5+1) ) & ( (1 << 1) - 1 ) ) == 0 ? -1 : 1);
      _dTheta_14   = ( _address >> (0+7+5+1+1) ) & ( (1 << 3) - 1);
      _clct_1      = ( _address >> (0+7+5+1+1+3) ) & ( (1 << 2) - 1);
      _clct_1 *= ( ( ( _address >> (0+7+5+1+1+3+2) ) & ( (1 << 1) - 1) ) == 0 ? -1 : 1);
      _fr_1        = ( _address >> (0+7+5+1+1+3+2+1) ) & ( (1 << 1) - 1);
      _eta_LUT     = ( _address >> (0+7+5+1+1+3+2+1+1) ) & ( (1 << 5) - 1);
      _mode_LUT    = ( _address >> (0+7+5+1+1+3+2+1+1+5) ) & ( (1 << 4) - 1);
    }
    else if (_mode == 14) {
      _dPhi_23     = ( _address >> (0) )     & ( (1 << 7) - 1);
      _dPhi_34     = ( _address >> (0+7) )   & ( (1 << 6) - 1);
      _dPhi_23 *= (( ( _address >> (0+7+6) ) & ( (1 << 1) - 1 ) ) == 0 ? -1 : 1);
      _dPhi_34 *= (( ( _address >> (0+7+6+1) ) & ( (1 << 1) - 1 ) ) == 0 ? -1 : 1);
      _dTheta_24   = ( _address >> (0+7+6+1+1) ) & ( (1 << 3) - 1);
      _clct_2      = ( _address >> (0+7+5+1+1+3) ) & ( (1 << 2) - 1);
      _clct_2 *= ( ( ( _address >> (0+7+6+1+1+3+2) ) & ( (1 << 1) - 1) ) == 0 ? -1 : 1);
      _eta_LUT     = ( _address >> (0+7+6+1+1+3+2+1) ) & ( (1 << 5) - 1);
      _mode_LUT    = ( _address >> (0+7+6+1+1+3+2+1+5) ) & ( (1 << 4) - 1);
    }
    else if (_mode == 15) {
      _dPhi_12     = ( _address >> (0) )     & ( (1 << 7) - 1);
      _dPhi_23     = ( _address >> (0+7) )   & ( (1 << 5) - 1);
      _dPhi_34     = ( _address >> (0+7+5) ) & ( (1 << 6) - 1);
      _dPhi_23 *= (( ( _address >> (0+7+5+6) ) & ( (1 << 1) - 1 ) ) == 0 ? -1 : 1);
      _dPhi_34 *= (( ( _address >> (0+7+5+6+1) ) & ( (1 << 1) - 1 ) ) == 0 ? -1 : 1);
      _fr_1        = ( _address >> (0+7+5+6+1+1) ) & ( (1 << 1) - 1);
      _eta_LUT     = ( _address >> (0+7+5+6+1+1+1) ) & ( (1 << 5) - 1);
      _mode_LUT    = ( _address >> (0+7+5+6+1+1+1+5) ) & ( (1 << 4) - 1);
    }
    else { std::vector<int> vec(arr, arr+22); return vec; }

		   
    arr[ 0] = _dPhi_12;
    arr[ 1] = _dPhi_13;
    arr[ 2] = _dPhi_14;
    arr[ 3] = _dPhi_23;
    arr[ 4] = _dPhi_24;
    arr[ 5] = _dPhi_34;
    
    arr[ 6] = _dTheta_12;
    arr[ 7] = _dTheta_13;
    arr[ 8] = _dTheta_14;
    arr[ 9] = _dTheta_23;
    arr[10] = _dTheta_24;
    arr[11] = _dTheta_34;
    
    arr[12] = _clct_1;
    arr[13] = _clct_2;
    arr[14] = _clct_3;
    arr[15] = _clct_4;
    
    arr[16] = _fr_1;
    arr[17] = _fr_2;
    arr[18] = _fr_3;
    arr[19] = _fr_4;
    
    arr[20] = _eta_LUT;
    arr[21] = _mode_LUT;
    
    std::vector<int> vec(arr, arr+22);
    return vec;

  } // End function: std::vector<int> convert_EMTF_pT_LUT
    

} // End namespace l1t
